From 76440ed67e3302493e8a0c3826cafa96b7488d9a Mon Sep 17 00:00:00 2001
From: Vernon Yang <vernon2gm@gmail.com>
Date: Wed, 30 Apr 2025 12:35:45 +0800
Subject: [PATCH] mm: add mmput_try_async function

Signed-off-by: Vernon Yang <vernon2gm@gmail.com>
---
 include/linux/sched/mm.h |  1 +
 kernel/fork.c            | 39 ++++++++++++++++++++++++++++++++++++++-
 2 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/include/linux/sched/mm.h b/include/linux/sched/mm.h
index b13474825130..cb81f2d10eb7 100644
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@ -145,6 +145,7 @@ extern void mmput(struct mm_struct *);
  * be called from the atomic context as well
  */
 void mmput_async(struct mm_struct *);
+bool mmput_try_async(struct mm_struct *mm);
 #endif
 
 /* Grab a reference to a task's mm, if it is not already going away */
diff --git a/kernel/fork.c b/kernel/fork.c
index c4b26cd8998b..008af7e51325 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1397,7 +1397,7 @@ void mmput(struct mm_struct *mm)
 {
 	might_sleep();
 
-	if (atomic_dec_and_test(&mm->mm_users))
+	if (atomic_dec_and_test(&mm->mm_users) && !mmput_try_async(mm))
 		__mmput(mm);
 }
 EXPORT_SYMBOL_GPL(mmput);
@@ -1419,6 +1419,43 @@ void mmput_async(struct mm_struct *mm)
 	}
 }
 EXPORT_SYMBOL_GPL(mmput_async);
+
+bool mmput_try_async(struct mm_struct *mm)
+{
+	static atomic_t last_cpu = ATOMIC_INIT(0);
+	bool loop_again = true;
+	int new_cpu;
+	int start;
+
+	if (nr_running() >= num_online_cpus())
+		return false;
+
+retry:
+	start = atomic_read(&last_cpu);
+	if (start == 0)
+		loop_again = false;
+
+	for_each_online_cpu_wrap(new_cpu, start) {
+		if (available_idle_cpu(new_cpu))
+			goto found;
+	}
+
+	atomic_set(&last_cpu, 0);
+	if (loop_again) {
+		loop_again = false;
+		goto retry;
+	}
+
+	return false;
+
+found:
+	atomic_set(&last_cpu, new_cpu);
+	INIT_WORK(&mm->async_put_work, mmput_async_fn);
+	queue_work_on(new_cpu, system_wq, &mm->async_put_work);
+
+	return true;
+}
+EXPORT_SYMBOL_GPL(mmput_try_async);
 #endif
 
 /**
-- 
2.47.0

