From eda0f38c162d834a76797d5941c41e04d7ff931e Mon Sep 17 00:00:00 2001
From: Vernon Yang <vernon2gm@gmail.com>
Date: Tue, 10 Jun 2025 22:38:18 +0800
Subject: [PATCH] Add cma test

Signed-off-by: Vernon Yang <vernon2gm@gmail.com>
---
 arch/x86/kernel/setup.c |  3 +++
 include/linux/cma.h     |  2 ++
 mm/Makefile             |  1 +
 mm/cma_test.c           | 40 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 46 insertions(+)
 create mode 100644 mm/cma_test.c

diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index fb27be697128..48e184d02d1c 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -26,6 +26,7 @@
 #include <linux/tboot.h>
 #include <linux/usb/xhci-dbgp.h>
 #include <linux/vmalloc.h>
+#include <linux/cma.h>
 
 #include <uapi/linux/mount.h>
 
@@ -1189,6 +1190,8 @@ void __init setup_arch(char **cmdline_p)
 		hugetlb_bootmem_alloc();
 	}
 
+	cma_test_reserve();
+
 	/*
 	 * Reserve memory for crash kernel after SRAT is parsed so that it
 	 * won't consume hotpluggable memory.
diff --git a/include/linux/cma.h b/include/linux/cma.h
index 62d9c1cf6326..e558e6a35254 100644
--- a/include/linux/cma.h
+++ b/include/linux/cma.h
@@ -77,4 +77,6 @@ static inline bool cma_validate_zones(struct cma *cma)
 }
 #endif
 
+void cma_test_reserve(void);
+
 #endif
diff --git a/mm/Makefile b/mm/Makefile
index 1a7a11d4933d..6bbca24262fd 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -148,3 +148,4 @@ obj-$(CONFIG_SHRINKER_DEBUG) += shrinker_debug.o
 obj-$(CONFIG_EXECMEM) += execmem.o
 obj-$(CONFIG_TMPFS_QUOTA) += shmem_quota.o
 obj-$(CONFIG_PT_RECLAIM) += pt_reclaim.o
+obj-y += cma_test.o
diff --git a/mm/cma_test.c b/mm/cma_test.c
new file mode 100644
index 000000000000..f15556f3c951
--- /dev/null
+++ b/mm/cma_test.c
@@ -0,0 +1,40 @@
+#include <linux/module.h>
+#include <linux/mm.h>
+#include <linux/mm_types.h>
+#include <linux/types.h>
+#include <linux/sizes.h>
+#include <linux/cma.h>
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+
+struct cma *cma;
+struct folio *folio;
+
+void cma_test_reserve(void)
+{
+	cma_declare_contiguous_nid(0, SZ_2G, 0, PAGE_SIZE, 0, false, "cma_test",
+				   &cma, NUMA_NO_NODE);
+}
+
+static int __init cma_test_init(void)
+{
+	folio = cma_alloc_folio(cma, get_order(SZ_1G), GFP_KERNEL | __GFP_COMP);
+	if (folio == NULL) {
+		pr_err("alloc memory from CMA is failed.\n");
+		return -ENOMEM;
+	}
+
+        return 0;
+}
+
+static void __exit cma_test_exit(void)
+{
+	cma_free_folio(cma, folio);
+}
+
+module_init(cma_test_init);
+module_exit(cma_test_exit);
+
+MODULE_AUTHOR("Vernon Yang <vernon2gm@gmail.com>");
+MODULE_DESCRIPTION("cma test");
+MODULE_LICENSE("GPL v2");
-- 
2.34.1

