From d108857070383783902bddc961a3308ac209d35a Mon Sep 17 00:00:00 2001
From: Vernon Yang <vernon2gm@gmail.com>
Date: Wed, 5 Mar 2025 20:45:31 +0800
Subject: [PATCH] mm: memcg: add memory.highatomic

By adding the memory.highatomic node to the cgroup, when setting it, the
user space process in this cgroup can prioritize memory allocation, which
is equivalent to using highatomic memory pool to reduce the number of
times the execution of direct memory reclaim.

Signed-off-by: Vernon Yang <vernon2gm@gmail.com>
---
 include/linux/memcontrol.h |  3 +++
 mm/memcontrol.c            | 35 +++++++++++++++++++++++++++++++++++
 mm/page_alloc.c            |  7 +++++++
 3 files changed, 45 insertions(+)

diff --git a/include/linux/memcontrol.h b/include/linux/memcontrol.h
index 6e74b8254d9b..f231b0b33acc 100644
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@ -220,6 +220,9 @@ struct mem_cgroup {
 	 */
 	bool oom_group;
 
+	/* Allows access to MIGRATE_HIGHATOMIC */
+	bool highatomic;
+
 	int swappiness;
 
 	/* memory.events and memory.events.local */
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 46f8b372d212..59d8a2a8b50a 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -4288,6 +4288,35 @@ static ssize_t memory_oom_group_write(struct kernfs_open_file *of,
 	return nbytes;
 }
 
+static int memory_highatomic_show(struct seq_file *m, void *v)
+{
+        struct mem_cgroup *memcg = mem_cgroup_from_seq(m);
+
+        seq_printf(m, "%d\n", READ_ONCE(memcg->highatomic));
+
+        return 0;
+}
+
+static ssize_t memory_highatomic_write(struct kernfs_open_file *of,
+                                     char *buf, size_t nbytes, loff_t off)
+{
+        struct mem_cgroup *memcg = mem_cgroup_from_css(of_css(of));
+        bool highatomic;
+        int ret;
+
+        buf = strstrip(buf);
+        if (!buf)
+                return -EINVAL;
+
+        ret = kstrtobool(buf, &highatomic);
+        if (ret)
+                return ret;
+
+        WRITE_ONCE(memcg->highatomic, highatomic);
+
+        return nbytes;
+}
+
 enum {
 	MEMORY_RECLAIM_SWAPPINESS = 0,
 	MEMORY_RECLAIM_NULL,
@@ -4430,6 +4459,12 @@ static struct cftype memory_files[] = {
 		.seq_show = memory_oom_group_show,
 		.write = memory_oom_group_write,
 	},
+        {
+                .name = "highatomic",
+                .flags = CFTYPE_NOT_ON_ROOT | CFTYPE_NS_DELEGATABLE,
+                .seq_show = memory_highatomic_show,
+                .write = memory_highatomic_write,
+        },
 	{
 		.name = "reclaim",
 		.flags = CFTYPE_NS_DELEGATABLE,
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 579789600a3c..99e0fa3df5de 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -4035,6 +4035,13 @@ gfp_to_alloc_flags(gfp_t gfp_mask, unsigned int order)
 	} else if (unlikely(rt_or_dl_task(current)) && in_task())
 		alloc_flags |= ALLOC_MIN_RESERVE;
 
+	if (!mem_cgroup_disabled()) {
+		struct mem_cgroup *memcg = mem_cgroup_from_task(current);
+
+		if (memcg && READ_ONCE(memcg->highatomic))
+			alloc_flags |= ALLOC_HIGHATOMIC;
+	}
+
 	alloc_flags = gfp_to_alloc_flags_cma(gfp_mask, alloc_flags);
 
 	return alloc_flags;
-- 
2.34.1

